================
CODE SNIPPETS
================
TITLE: Full Pillow Build and Test Example on Windows
DESCRIPTION: A comprehensive example script demonstrating the full process of building and testing Pillow on Windows. It includes setting the Python path, preparing the build, building dependencies, setting up the environment, installing Pillow, running self-tests, and executing pytest with coverage.

SOURCE: https://github.com/python-pillow/pillow/blob/main/winbuild/build.rst

LANGUAGE: batch
CODE:
```
set PYTHON=C:\Python310\bin
cd /D C:\Pillow\winbuild
%PYTHON%\python.exe build_prepare.py -v --depends C:\pillow-depends
build\build_dep_all.cmd
build\build_env.cmd
cd ..
%PYTHON%\python.exe -m pip install -v -C raqm=vendor -C fribidi=vendor .
path C:\Pillow\winbuild\build\bin;%PATH%
%PYTHON%\python.exe selftest.py
%PYTHON%\python.exe -m pytest -vv -x --cov PIL --cov Tests --cov-report term --cov-report xml Tests
%PYTHON%\python.exe -m pip wheel -v -C raqm=vendor -C fribidi=vendor .
```

--------------------------------

TITLE: Basic Pillow Installation with Pip
DESCRIPTION: Installs or upgrades Pillow and its dependencies using pip. It also shows how to install optional packages like defusedxml and olefile for extended format support.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/basic-installation.rst

LANGUAGE: shell
CODE:
```
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade Pillow
```

LANGUAGE: shell
CODE:
```
python3 -m pip install --upgrade defusedxml olefile
```

--------------------------------

TITLE: Pillow Installation and Universal Binary Creation on macOS
DESCRIPTION: Installs Pillow on macOS using pip, supporting x86-64 and arm64 architectures. It includes steps to download platform-specific wheels and combine them into a universal2 binary using the delocate library.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/basic-installation.rst

LANGUAGE: shell
CODE:
```
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade Pillow
```

LANGUAGE: shell
CODE:
```
python3 -m pip download --only-binary=:all: --platform macosx_10_10_x86_64 Pillow
python3 -m pip download --only-binary=:all: --platform macosx_11_0_arm64 Pillow
python3 -m pip install delocate
```

--------------------------------

TITLE: Pillow Installation on FreeBSD
DESCRIPTION: Installs Pillow on FreeBSD systems using either the Ports or Packages system. This provides a native installation method for the graphics/py-pillow package.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/basic-installation.rst

LANGUAGE: shell
CODE:
```
cd /usr/ports/graphics/py-pillow && make install clean
```

LANGUAGE: shell
CODE:
```
pkg install py38-pillow
```

--------------------------------

TITLE: Pillow Installation on Linux
DESCRIPTION: Installs Pillow on Linux systems using pip. This method utilizes manylinux wheels which support most common image formats, excluding libimagequant. Raqm support may require separate FriBiDi installation.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/basic-installation.rst

LANGUAGE: shell
CODE:
```
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade Pillow
```

--------------------------------

TITLE: Set up Debug Python Virtual Environment and Install Pillow
DESCRIPTION: This section details the process of creating a virtual environment using a debug version of Python and installing the Pillow library within it. This is essential for ensuring that the C extensions are built with debugging symbols, allowing for more effective debugging with tools like GDB and Valgrind. The commands guide users through creating the environment, activating it, and installing Pillow.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/c_extension_debugging.rst

LANGUAGE: bash
CODE:
```
virtualenv -p python3.8-dbg ~/vpy38-dbg
source ~/vpy38-dbg/bin/activate
cd ~/Pillow && make install
```

--------------------------------

TITLE: Install Pillow on Windows
DESCRIPTION: Installs Pillow using pip after setting up the build environment. This command installs Pillow from the current directory, with verbose output, and specifies vendor paths for optional dependencies raqm and fribidi.

SOURCE: https://github.com/python-pillow/pillow/blob/main/winbuild/build.rst

LANGUAGE: bash
CODE:
```
winbuild\build\build_env.cmd
python.exe -m pip install -v -C raqm=vendor -C fribidi=vendor .
```

--------------------------------

TITLE: Combining macOS Pillow Wheels with Python
DESCRIPTION: A Python script using the delocate library to fuse separate x86-64 and arm64 Pillow wheel files into a single universal2 wheel for macOS.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/basic-installation.rst

LANGUAGE: python
CODE:
```
from delocate.fuse import fuse_wheels
fuse_wheels('Pillow-9.4.0-2-cp39-cp39-macosx_10_10_x86_64.whl', 'Pillow-9.4.0-cp39-cp39-macosx_11_0_arm64.whl', 'Pillow-9.4.0-cp39-cp39-macosx_11_0_universal2.whl')
```

--------------------------------

TITLE: Install Python Development Libraries on Alpine
DESCRIPTION: Installs Python development headers and setuptools for Alpine Linux, enabling the building of Python packages from source.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
sudo apk add python3-dev py3-setuptools

```

--------------------------------

TITLE: Install Pillow Dependencies with Extras
DESCRIPTION: Demonstrates how to install Pillow with specific dependencies for tests or documentation building using pip and the extras_require feature. This replaces the older method of using requirements.txt.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst

LANGUAGE: bash
CODE:
```
python3 -m pip install .[tests]
python3 -m pip install .[docs]
python3 -m pip install .[docs,tests]
# On macOS, the last argument may need to be wrapped in quotes, e.g.
python3 -m pip install ".[tests]"
```

--------------------------------

TITLE: Install Python Development Libraries on Debian/Ubuntu
DESCRIPTION: Installs Python development headers and setuptools, which are necessary for building Python packages from source on Debian-based systems.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
sudo apt-get install python3-dev python3-setuptools

```

--------------------------------

TITLE: Install Pytest Dependencies
DESCRIPTION: Installs pytest and related plugins required for running tests. This command uses pip to manage Python packages.

SOURCE: https://github.com/python-pillow/pillow/blob/main/Tests/README.rst

LANGUAGE: shell
CODE:
```
python3 -m pip install pytest pytest-cov pytest-timeout
```

--------------------------------

TITLE: Install build tools for libavif on Ubuntu
DESCRIPTION: Installs CMake, Ninja, and NASM on Ubuntu, which are build prerequisites for compiling libavif, a library for AVIF image format support.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
sudo apt-get install cmake ninja-build nasm

```

--------------------------------

TITLE: Install Pillow from Source using Pip
DESCRIPTION: Installs or upgrades Pillow from PyPI, forcing a build from source code. This command ensures that Pillow is compiled with the system's installed prerequisites and bypasses pre-built wheels.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade Pillow --no-binary :all:
```

--------------------------------

TITLE: Install Pillow from Source with Custom Library Paths
DESCRIPTION: Installs Pillow from source while specifying custom include paths for required libraries. This is useful when prerequisites are installed in non-standard locations.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
CFLAGS="-I/usr/pkg/include" python3 -m pip install --upgrade Pillow --no-binary :all:
```

--------------------------------

TITLE: Install Pillow Prerequisites on Windows using MSYS2/MinGW
DESCRIPTION: Installs necessary development tools and libraries for building Pillow on Windows using the MSYS2 MinGW 64-bit environment. This includes GCC, Python, pip, and image-related libraries.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
pacman -S \
    mingw-w64-x86_64-gcc \
    mingw-w64-x86_64-python \
    mingw-w64-x86_64-python-pip \
    mingw-w64-x86_64-python-setuptools
```

LANGUAGE: bash
CODE:
```
pacman -S \
    mingw-w64-x86_64-libjpeg-turbo \
    mingw-w64-x86_64-zlib \
    mingw-w64-x86_64-libtiff \
    mingw-w64-x86_64-freetype \
    mingw-w64-x86_64-lcms2 \
    mingw-w64-x86_64-libwebp \
    mingw-w64-x86_64-openjpeg2 \
    mingw-w64-x86_64-libimagequant \
    mingw-w64-x86_64-libraqm \
    mingw-w64-x86_64-libavif
```

--------------------------------

TITLE: Install Pillow from Local Source Code
DESCRIPTION: Installs Pillow after cloning the source code locally. This command should be run from within the cloned Pillow directory.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
python3 -m pip install --upgrade pip
```

--------------------------------

TITLE: Open, Rotate, and Display Image (Python)
DESCRIPTION: Opens an image file, rotates it by 45 degrees, and displays it using the default system viewer. This example demonstrates basic image loading and transformation.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst

LANGUAGE: Python
CODE:
```
from PIL import Image
with Image.open("hopper.jpg") as im:
    im.rotate(45).show()
```

--------------------------------

TITLE: Install Pillow Prerequisites on FreeBSD
DESCRIPTION: Installs Python development libraries and essential image processing dependencies on FreeBSD 10 or 11. This command installs packages for JPEG, TIFF, WebP, FreeType, and others.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
sudo pkg install python3
```

LANGUAGE: bash
CODE:
```
sudo pkg install jpeg-turbo tiff webp lcms2 freetype2 openjpeg harfbuzz fribidi libxcb libavif
```

--------------------------------

TITLE: Install Pillow Prerequisites on Alpine Linux
DESCRIPTION: Installs development libraries for Pillow on Alpine Linux using the apk package manager. This includes dependencies for various image codecs and font rendering.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
sudo apk add tiff-dev jpeg-dev openjpeg-dev zlib-dev freetype-dev lcms2-dev libwebp-dev tcl-dev tk-dev harfbuzz-dev fribidi-dev libimagequant-dev libxcb-dev libpng-dev
```

--------------------------------

TITLE: Install Pillow Prerequisites on macOS using Homebrew
DESCRIPTION: Installs essential image processing libraries on macOS using Homebrew, which are required for compiling Pillow. This command installs libraries for JPEG, TIFF, WebP, and more.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
brew install libavif libjpeg libraqm libtiff little-cms2 openjpeg webp
```

--------------------------------

TITLE: PIL Info Functionality
DESCRIPTION: The `pilinfo` function (aliased from `PIL.features.pilinfo`) provides detailed information about the Pillow installation, including available features, modules, and codecs. It's a comprehensive diagnostic tool.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/features.rst

LANGUAGE: python
CODE:
```
from PIL import Image

# The pilinfo function is available directly via Image module
# or through features module depending on Pillow version/context
# Calling it directly for demonstration:
from PIL.features import pilinfo
pilinfo()

# Alternatively, often accessed via Image.INFO
# print(Image.INFO)
```

--------------------------------

TITLE: Install Pillow from Source using Pip (No Cache)
DESCRIPTION: Installs or upgrades Pillow from PyPI, forcing a build from source code and disabling the pip cache. This ensures a fresh build, especially after installing new prerequisites.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade Pillow --no-binary :all: --no-cache-dir
```

--------------------------------

TITLE: Install Python Development Libraries on Fedora
DESCRIPTION: Installs Python development headers and related RPM configuration, required for building Python packages from source on Fedora.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
sudo dnf install python3-devel redhat-rpm-config

```

--------------------------------

TITLE: Install libavif build dependencies on macOS
DESCRIPTION: Installs specific build dependencies for libavif on macOS using Homebrew, enabling support for more codecs beyond aom. This is an alternative to directly installing libavif.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
brew install aom dav1d rav1e svt-av1
```

--------------------------------

TITLE: Accessing EXIF LightSource Tag Values with PIL.ExifTags
DESCRIPTION: Demonstrates how to retrieve EXIF LightSource tag information using the PIL.ExifTags module. The examples show how to get the integer value of the 'Unknown' tag and how to convert an integer ID to its corresponding tag name. Requires Pillow.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ExifTags.rst

LANGUAGE: python
CODE:
```
from PIL.ExifTags import LightSource
LightSource.Unknown.value
LightSource(0).name
```

--------------------------------

TITLE: Install Pillow Prerequisites on Ubuntu
DESCRIPTION: Installs essential development libraries on Ubuntu for Pillow to support TIFF, JPEG, OpenJPEG, zlib, FreeType, lcms2, WebP, Tcl/Tk, and HarfBuzz. This is crucial for enabling various image format and text rendering capabilities.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
sudo apt-get install libtiff5-dev libjpeg8-dev libopenjp2-7-dev zlib1g-dev \
    libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python3-tk \
    libharfbuzz-dev libfribidi-dev libxcb1-dev

```

--------------------------------

TITLE: Build and Test Pillow on Windows
DESCRIPTION: This script automates the build and testing process for Pillow on Windows. It requires Python, Visual Studio, NASM, and CMake. The script prepares the build environment, installs dependencies, runs self-tests, executes pytest for comprehensive testing, and finally builds a wheel package.

SOURCE: https://github.com/python-pillow/pillow/blob/main/winbuild/README.md

LANGUAGE: batch
CODE:
```
set PYTHON=C:\Python310\bin
cd /D C:\Pillow\winbuild
%PYTHON%\python.exe build_prepare.py -v --depends=C:\pillow-depends
build\build_dep_all.cmd
cd ..
%PYTHON%\python.exe -m pip install -v -C raqm=vendor -C fribidi=vendor .
path C:\Pillow\winbuild\build\bin;%PATH%
%PYTHON%\python.exe selftest.py
%PYTHON%\python.exe -m pytest -vv -x --cov PIL --cov Tests --cov-report term --cov-report xml Tests
%PYTHON%\python.exe -m pip wheel -v -C raqm=vendor -C fribidi=vendor .
```

--------------------------------

TITLE: Install Pillow Prerequisites on Red Hat/CentOS/Fedora
DESCRIPTION: Installs development libraries on Red Hat-based systems for Pillow to support TIFF, JPEG, OpenJPEG, zlib, FreeType, lcms2, and WebP. These are necessary for image format handling.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
sudo dnf install libtiff-devel libjpeg-devel openjpeg2-devel zlib-devel \
    freetype-devel lcms2-devel libwebp-devel tcl-devel tk-devel

```

--------------------------------

TITLE: Get All Supported Modules
DESCRIPTION: The `get_supported_modules` function returns a list of all modules that Pillow has detected support for on the system. This provides a broad view of the integration status of various libraries.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/features.rst

LANGUAGE: python
CODE:
```
from PIL import features

supported_modules = features.get_supported_modules()
print('Supported modules:')
for module in supported_modules:
    print(f'- {module}')
```

--------------------------------

TITLE: Install Pillow Prerequisites on Fedora/CentOS
DESCRIPTION: Installs development packages required for Pillow compilation on Fedora or CentOS systems using yum or DNF. These packages include libraries for image formats and image manipulation.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
sudo yum install -y harfbuzz-devel fribidi-devel libraqm-devel libimagequant-devel libxcb-devel
```

--------------------------------

TITLE: Create ImageWindow for Displaying Raster Data (Python)
DESCRIPTION: Provides an example of using the experimental 'ImageWindow' class from the 'ImageWin' module to display raster data in a WCK-style toplevel window. This functionality is intended for use on Windows.

SOURCE: https://github.com/python-pillow/pillow/blob/main/CHANGES.rst

LANGUAGE: python
CODE:
```
# Example usage:
# from PIL import Image, ImageWin
# img = Image.new('RGB', (60, 30), color = 'red')
# window = ImageWin.ImageWindow(img)
# window.display()
```

--------------------------------

TITLE: Install Pillow in Editable Mode on Windows
DESCRIPTION: Installs Pillow in editable mode on Windows using pip. This is useful for development, allowing changes to the source code to be reflected immediately without reinstallation. It also specifies vendor paths for optional dependencies.

SOURCE: https://github.com/python-pillow/pillow/blob/main/winbuild/build.rst

LANGUAGE: bash
CODE:
```
winbuild\build\build_env.cmd
python.exe -m pip install -v -C raqm=vendor -C fribidi=vendor -e .
```

--------------------------------

TITLE: Install Pillow Prerequisites on Android (Termux)
DESCRIPTION: Installs basic dependencies for compiling Pillow within the Termux environment on Android. This includes Python, the NDK sysroot, clang, make, and libjpeg-turbo.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst

LANGUAGE: bash
CODE:
```
pkg install -y python ndk-sysroot clang make libjpeg-turbo
```

--------------------------------

TITLE: Resize Image using Pillow
DESCRIPTION: This example demonstrates resizing an image to half its original dimensions using the `resize` method in Pillow. It calculates the new width and height and applies the transformation.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst

LANGUAGE: python
CODE:
```
from PIL import Image

with Image.open("hopper.jpg") as im:

    # Provide the target width and height of the image
    (width, height) = (im.width // 2, im.height // 2)
    im_resized = im.resize((width, height))
```

--------------------------------

TITLE: Get All Supported Features
DESCRIPTION: The `get_supported` function returns a list of all features that Pillow can detect on the current system. This provides a comprehensive overview of available capabilities.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/features.rst

LANGUAGE: python
CODE:
```
from PIL import features

supported_features = features.get_supported()
print('Supported features:')
for feature in supported_features:
    print(f'- {feature}')
```

--------------------------------

TITLE: Create New Image with Specified Color in Python
DESCRIPTION: Shows how to create a new image with a specific mode, size, and color. This example illustrates defining colors using tuples for multi-channel images and single numbers for single-channel images.

SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst

LANGUAGE: python
CODE:
```
from PIL import Image

# Create a 1x1 RGB image with red color
rgb_image = Image.new("RGB", (1, 1), (255, 0, 0))

# Create a 1x1 grayscale image with white color
grayscale_image = Image.new("L", (1, 1), 255)

# Create a 1x1 RGBA image with a specific hex color (note byte order)
# 0x04030201 corresponds to (R=1, G=2, B=3, A=4) due to Pillow's interpretation
# For explicit RGBA tuple: (1, 2, 3, 4)
rgba_image = Image.new("RGBA", (1, 1), 0x04030201)

print(f"RGB pixel value: {rgb_image.getpixel((0, 0))}")
print(f"Grayscale pixel value: {grayscale_image.getpixel((0, 0))}")
print(f"RGBA pixel value: {rgba_image.getpixel((0, 0))}")
```